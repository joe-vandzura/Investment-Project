{"ast":null,"code":"var _jsxFileName = \"/Users/joeyvandzura/projects/01-starting-project/src/components/InvestmentForm.js\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InvestmentForm() {\n  const calculateHandler = userInput => {\n    console.log(\"Working\");\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"form\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"current-savings\",\n          children: \"Current Savings ($)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"current-savings\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"yearly-contribution\",\n          children: \"Yearly Savings ($)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"yearly-contribution\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"expected-return\",\n          children: \"Expected Interest (%, per year)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"expected-return\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"duration\",\n          children: \"Investment Duration (years)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"duration\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"reset\",\n        className: \"buttonAlt\",\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: calculateHandler,\n        className: \"button\",\n        children: \"Calculate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n}\n_c = InvestmentForm;\nexport default InvestmentForm;\n\n// export default InvestmentForm = () => {\n\n// const calculateHandler = (userInput) => {\n\n//     console.log(\"Working\");\n//     // Should be triggered when form is submitted\n//     // You might not directly want to bind it to the submit event on the form though...\n\n//     const yearlyData = []; // per-year results\n\n//     let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n//     const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n//     const expectedReturn = +userInput['expected-return'] / 100;\n//     const duration = +userInput['duration'];\n\n//     // The below code calculates yearly results (total savings, interest etc)\n//     for (let i = 0; i < duration; i++) {\n//       const yearlyInterest = currentSavings * expectedReturn;\n//       currentSavings += yearlyInterest + yearlyContribution;\n//       yearlyData.push({\n//         // feel free to change the shape of the data pushed to the array!\n//         year: i + 1,\n//         yearlyInterest: yearlyInterest,\n//         savingsEndOfYear: currentSavings,\n//         yearlyContribution: yearlyContribution,\n//       });\n//     }\n\n//     // do something with yearlyData ...\n//   };\n\n//     return (\n\n//     <form className=\"form\">\n\n//     <div className=\"input-group\">\n//       <p>\n//         <label htmlFor=\"current-savings\">Current Savings ($)</label>\n//         <input type=\"number\" id=\"current-savings\" />\n//       </p>\n//       <p>\n//         <label htmlFor=\"yearly-contribution\">Yearly Savings ($)</label>\n//         <input type=\"number\" id=\"yearly-contribution\" />\n//       </p>\n//     </div>\n//     <div className=\"input-group\">\n//       <p>\n//         <label htmlFor=\"expected-return\">\n//           Expected Interest (%, per year)\n//         </label>\n//         <input type=\"number\" id=\"expected-return\" />\n//       </p>\n//       <p>\n//         <label htmlFor=\"duration\">Investment Duration (years)</label>\n//         <input type=\"number\" id=\"duration\" />\n//       </p>\n//     </div>\n\n//     <p className=\"actions\">\n//       <button type=\"reset\" className=\"buttonAlt\">\n//         Reset\n//       </button>\n//       <button onClick={calculateHandler} className=\"button\">\n//         Calculate\n//       </button>\n//     </p>\n\n//   </form>\n//   );\n// }\nvar _c;\n$RefreshReg$(_c, \"InvestmentForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","InvestmentForm","calculateHandler","userInput","console","log","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","onClick","_c","$RefreshReg$"],"sources":["/Users/joeyvandzura/projects/01-starting-project/src/components/InvestmentForm.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction InvestmentForm() {\n    const calculateHandler = (userInput) => {\n\n        console.log(\"Working\");\n        // Should be triggered when form is submitted\n        // You might not directly want to bind it to the submit event on the form though...\n    \n        const yearlyData = []; // per-year results\n    \n        let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n        const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n        const expectedReturn = +userInput['expected-return'] / 100;\n        const duration = +userInput['duration'];\n    \n        // The below code calculates yearly results (total savings, interest etc)\n        for (let i = 0; i < duration; i++) {\n          const yearlyInterest = currentSavings * expectedReturn;\n          currentSavings += yearlyInterest + yearlyContribution;\n          yearlyData.push({\n            // feel free to change the shape of the data pushed to the array!\n            year: i + 1,\n            yearlyInterest: yearlyInterest,\n            savingsEndOfYear: currentSavings,\n            yearlyContribution: yearlyContribution,\n          });\n        }\n    \n        // do something with yearlyData ...\n      };\n      \n    return (\n    \n        <form className=\"form\">\n            \n        <div className=\"input-group\">\n          <p>\n            <label htmlFor=\"current-savings\">Current Savings ($)</label>\n            <input type=\"number\" id=\"current-savings\" />\n          </p>\n          <p>\n            <label htmlFor=\"yearly-contribution\">Yearly Savings ($)</label>\n            <input type=\"number\" id=\"yearly-contribution\" />\n          </p>\n        </div>\n        <div className=\"input-group\">\n          <p>\n            <label htmlFor=\"expected-return\">\n              Expected Interest (%, per year)\n            </label>\n            <input type=\"number\" id=\"expected-return\" />\n          </p>\n          <p>\n            <label htmlFor=\"duration\">Investment Duration (years)</label>\n            <input type=\"number\" id=\"duration\" />\n          </p>\n        </div>\n    \n        <p className=\"actions\">\n          <button type=\"reset\" className=\"buttonAlt\">\n            Reset\n          </button>\n          <button onClick={calculateHandler} className=\"button\">\n            Calculate\n          </button>\n        </p>\n    \n      </form>\n      );\n}\n\nexport default InvestmentForm;\n\n// export default InvestmentForm = () => {\n\n    // const calculateHandler = (userInput) => {\n\n    //     console.log(\"Working\");\n    //     // Should be triggered when form is submitted\n    //     // You might not directly want to bind it to the submit event on the form though...\n    \n    //     const yearlyData = []; // per-year results\n    \n    //     let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    //     const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    //     const expectedReturn = +userInput['expected-return'] / 100;\n    //     const duration = +userInput['duration'];\n    \n    //     // The below code calculates yearly results (total savings, interest etc)\n    //     for (let i = 0; i < duration; i++) {\n    //       const yearlyInterest = currentSavings * expectedReturn;\n    //       currentSavings += yearlyInterest + yearlyContribution;\n    //       yearlyData.push({\n    //         // feel free to change the shape of the data pushed to the array!\n    //         year: i + 1,\n    //         yearlyInterest: yearlyInterest,\n    //         savingsEndOfYear: currentSavings,\n    //         yearlyContribution: yearlyContribution,\n    //       });\n    //     }\n    \n    //     // do something with yearlyData ...\n    //   };\n\n//     return (\n    \n//     <form className=\"form\">\n        \n//     <div className=\"input-group\">\n//       <p>\n//         <label htmlFor=\"current-savings\">Current Savings ($)</label>\n//         <input type=\"number\" id=\"current-savings\" />\n//       </p>\n//       <p>\n//         <label htmlFor=\"yearly-contribution\">Yearly Savings ($)</label>\n//         <input type=\"number\" id=\"yearly-contribution\" />\n//       </p>\n//     </div>\n//     <div className=\"input-group\">\n//       <p>\n//         <label htmlFor=\"expected-return\">\n//           Expected Interest (%, per year)\n//         </label>\n//         <input type=\"number\" id=\"expected-return\" />\n//       </p>\n//       <p>\n//         <label htmlFor=\"duration\">Investment Duration (years)</label>\n//         <input type=\"number\" id=\"duration\" />\n//       </p>\n//     </div>\n\n//     <p className=\"actions\">\n//       <button type=\"reset\" className=\"buttonAlt\">\n//         Reset\n//       </button>\n//       <button onClick={calculateHandler} className=\"button\">\n//         Calculate\n//       </button>\n//     </p>\n\n//   </form>\n//   );\n// }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}