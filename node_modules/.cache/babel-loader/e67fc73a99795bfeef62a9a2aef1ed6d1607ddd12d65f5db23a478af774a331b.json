{"ast":null,"code":"var _jsxFileName = \"/Users/joeyvandzura/projects/01-starting-project/src/components/InvestmentForm.js\";\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InvestmentForm() {\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Hi\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 12\n  }, this);\n}\n\n// export default InvestmentForm = () => {\n\n//     const calculateHandler = (userInput) => {\n\n//         console.log(\"Working\");\n//         // Should be triggered when form is submitted\n//         // You might not directly want to bind it to the submit event on the form though...\n\n//         const yearlyData = []; // per-year results\n\n//         let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n//         const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n//         const expectedReturn = +userInput['expected-return'] / 100;\n//         const duration = +userInput['duration'];\n\n//         // The below code calculates yearly results (total savings, interest etc)\n//         for (let i = 0; i < duration; i++) {\n//           const yearlyInterest = currentSavings * expectedReturn;\n//           currentSavings += yearlyInterest + yearlyContribution;\n//           yearlyData.push({\n//             // feel free to change the shape of the data pushed to the array!\n//             year: i + 1,\n//             yearlyInterest: yearlyInterest,\n//             savingsEndOfYear: currentSavings,\n//             yearlyContribution: yearlyContribution,\n//           });\n//         }\n\n//         // do something with yearlyData ...\n//       };\n\n//     return (\n\n//     <form className=\"form\">\n\n//     <div className=\"input-group\">\n//       <p>\n//         <label htmlFor=\"current-savings\">Current Savings ($)</label>\n//         <input type=\"number\" id=\"current-savings\" />\n//       </p>\n//       <p>\n//         <label htmlFor=\"yearly-contribution\">Yearly Savings ($)</label>\n//         <input type=\"number\" id=\"yearly-contribution\" />\n//       </p>\n//     </div>\n//     <div className=\"input-group\">\n//       <p>\n//         <label htmlFor=\"expected-return\">\n//           Expected Interest (%, per year)\n//         </label>\n//         <input type=\"number\" id=\"expected-return\" />\n//       </p>\n//       <p>\n//         <label htmlFor=\"duration\">Investment Duration (years)</label>\n//         <input type=\"number\" id=\"duration\" />\n//       </p>\n//     </div>\n\n//     <p className=\"actions\">\n//       <button type=\"reset\" className=\"buttonAlt\">\n//         Reset\n//       </button>\n//       <button onClick={calculateHandler} className=\"button\">\n//         Calculate\n//       </button>\n//     </p>\n\n//   </form>\n//   );\n// }\n_c = InvestmentForm;\nvar _c;\n$RefreshReg$(_c, \"InvestmentForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","InvestmentForm","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/joeyvandzura/projects/01-starting-project/src/components/InvestmentForm.js"],"sourcesContent":["import React, { useState } from \"react\";\n\nfunction InvestmentForm() {\n    return <h1>Hi</h1>\n}\n\n// export default InvestmentForm = () => {\n\n//     const calculateHandler = (userInput) => {\n\n//         console.log(\"Working\");\n//         // Should be triggered when form is submitted\n//         // You might not directly want to bind it to the submit event on the form though...\n    \n//         const yearlyData = []; // per-year results\n    \n//         let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n//         const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n//         const expectedReturn = +userInput['expected-return'] / 100;\n//         const duration = +userInput['duration'];\n    \n//         // The below code calculates yearly results (total savings, interest etc)\n//         for (let i = 0; i < duration; i++) {\n//           const yearlyInterest = currentSavings * expectedReturn;\n//           currentSavings += yearlyInterest + yearlyContribution;\n//           yearlyData.push({\n//             // feel free to change the shape of the data pushed to the array!\n//             year: i + 1,\n//             yearlyInterest: yearlyInterest,\n//             savingsEndOfYear: currentSavings,\n//             yearlyContribution: yearlyContribution,\n//           });\n//         }\n    \n//         // do something with yearlyData ...\n//       };\n\n//     return (\n    \n//     <form className=\"form\">\n        \n//     <div className=\"input-group\">\n//       <p>\n//         <label htmlFor=\"current-savings\">Current Savings ($)</label>\n//         <input type=\"number\" id=\"current-savings\" />\n//       </p>\n//       <p>\n//         <label htmlFor=\"yearly-contribution\">Yearly Savings ($)</label>\n//         <input type=\"number\" id=\"yearly-contribution\" />\n//       </p>\n//     </div>\n//     <div className=\"input-group\">\n//       <p>\n//         <label htmlFor=\"expected-return\">\n//           Expected Interest (%, per year)\n//         </label>\n//         <input type=\"number\" id=\"expected-return\" />\n//       </p>\n//       <p>\n//         <label htmlFor=\"duration\">Investment Duration (years)</label>\n//         <input type=\"number\" id=\"duration\" />\n//       </p>\n//     </div>\n\n//     <p className=\"actions\">\n//       <button type=\"reset\" className=\"buttonAlt\">\n//         Reset\n//       </button>\n//       <button onClick={calculateHandler} className=\"button\">\n//         Calculate\n//       </button>\n//     </p>\n\n//   </form>\n//   );\n// }"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,cAAcA,CAAA,EAAG;EACtB,oBAAOD,OAAA;IAAAE,QAAA,EAAI;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;AACtB;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAAC,EAAA,GAzESN,cAAc;AAAA,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}